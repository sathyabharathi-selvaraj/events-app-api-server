function cov_1tyxo19igf(){var path="/home/user225/sample-master-2021/api-server/src/routes/event.js";var hash="c0aa63d5db3c2f81e5504dfc728e431038b68feb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/user225/sample-master-2021/api-server/src/routes/event.js",statementMap:{"0":{start:{line:4,column:16},end:{line:4,column:34}},"1":{start:{line:5,column:15},end:{line:5,column:31}},"2":{start:{line:6,column:11},end:{line:6,column:50}},"3":{start:{line:13,column:0},end:{line:15,column:3}},"4":{start:{line:14,column:4},end:{line:14,column:51}},"5":{start:{line:22,column:0},end:{line:27,column:3}},"6":{start:{line:24,column:19},end:{line:24,column:46}},"7":{start:{line:26,column:4},end:{line:26,column:33}},"8":{start:{line:36,column:0},end:{line:39,column:3}},"9":{start:{line:37,column:19},end:{line:37,column:64}},"10":{start:{line:38,column:4},end:{line:38,column:21}},"11":{start:{line:47,column:0},end:{line:50,column:3}},"12":{start:{line:48,column:19},end:{line:48,column:54}},"13":{start:{line:49,column:4},end:{line:49,column:21}},"14":{start:{line:52,column:0},end:{line:52,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:19},end:{line:13,column:20}},loc:{start:{line:13,column:39},end:{line:15,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:17},end:{line:22,column:18}},loc:{start:{line:22,column:37},end:{line:27,column:1}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:19},end:{line:36,column:20}},loc:{start:{line:36,column:39},end:{line:39,column:1}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:22},end:{line:47,column:23}},loc:{start:{line:47,column:42},end:{line:50,column:1}},line:47}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c0aa63d5db3c2f81e5504dfc728e431038b68feb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1tyxo19igf=function(){return actualCoverage;};}return actualCoverage;}cov_1tyxo19igf();/**
 * returns data for '/api/event' routes
 */const express=(cov_1tyxo19igf().s[0]++,require('express'));const router=(cov_1tyxo19igf().s[1]++,express.Router());const db=(cov_1tyxo19igf().s[2]++,require('../services/database.service'));/**
 * GET /api/event/:id
 * Returns the event referenced by the value substituted for :id
 * For example: /events/event/1 returns the event with the id of 1
 */cov_1tyxo19igf().s[3]++;router.get('/:id',async(req,res)=>{cov_1tyxo19igf().f[0]++;cov_1tyxo19igf().s[4]++;res.json(await db.getEventById(req.params.id));});/**
 * POST /api/event
 * Creates a new event from the data in the request body (req.body)
 * Returns the list of all events including the new event
 */cov_1tyxo19igf().s[5]++;router.post('/',async(req,res)=>{cov_1tyxo19igf().f[1]++;// add to the database
const events=(cov_1tyxo19igf().s[6]++,await db.addEvent(req.body));// return all events
cov_1tyxo19igf().s[7]++;res.status(201).json(events);});/**
 * PUT /api/event/:id
 * Updates the event referenced by the value substituted for :id
 * For example: /events/event/1 will update the event with the id = 1
 * using the values in the request body (req.body)
 * Returns the list of all events including the updated event
 */cov_1tyxo19igf().s[8]++;router.put('/:id',async(req,res)=>{cov_1tyxo19igf().f[2]++;const events=(cov_1tyxo19igf().s[9]++,await db.updateEvent(req.params.id,req.body));cov_1tyxo19igf().s[10]++;res.json(events);});/**
 * DELETE /api/event/:id
 * Deletes the event referenced by the value substituted for :id
 * For example: /events/event/1 will delete the event with the id = 1
 * Returns the list of all events excluding the deleted event
 */cov_1tyxo19igf().s[11]++;router.delete('/:id',async(req,res)=>{cov_1tyxo19igf().f[3]++;const events=(cov_1tyxo19igf().s[12]++,await db.deleteEvent(req.params.id));cov_1tyxo19igf().s[13]++;res.json(events);});cov_1tyxo19igf().s[14]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwicm91dGVyIiwiUm91dGVyIiwiZGIiLCJnZXQiLCJyZXEiLCJyZXMiLCJqc29uIiwiZ2V0RXZlbnRCeUlkIiwicGFyYW1zIiwiaWQiLCJwb3N0IiwiZXZlbnRzIiwiYWRkRXZlbnQiLCJib2R5Iiwic3RhdHVzIiwicHV0IiwidXBkYXRlRXZlbnQiLCJkZWxldGUiLCJkZWxldGVFdmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJ1bUVBZVk7MkZBZlo7QUFDQTtBQUNBLEdBQ0EsS0FBTUEsQ0FBQUEsT0FBTywwQkFBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBVixDQUFiLENBQ0EsS0FBTUMsQ0FBQUEsTUFBTSwwQkFBR0YsT0FBTyxDQUFDRyxNQUFSLEVBQUgsQ0FBWixDQUNBLEtBQU1DLENBQUFBLEVBQUUsMEJBQUdILE9BQU8sQ0FBQyw4QkFBRCxDQUFWLENBQVIsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEcsd0JBQ0FDLE1BQU0sQ0FBQ0csR0FBUCxDQUFXLE1BQVgsQ0FBbUIsTUFBT0MsR0FBUCxDQUFZQyxHQUFaLEdBQW9CLGlEQUNuQ0EsR0FBRyxDQUFDQyxJQUFKLENBQVMsS0FBTUosQ0FBQUEsRUFBRSxDQUFDSyxZQUFILENBQWdCSCxHQUFHLENBQUNJLE1BQUosQ0FBV0MsRUFBM0IsQ0FBZixFQUNILENBRkQsRUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEcsd0JBQ0FULE1BQU0sQ0FBQ1UsSUFBUCxDQUFZLEdBQVosQ0FBaUIsTUFBT04sR0FBUCxDQUFZQyxHQUFaLEdBQW9CLHlCQUNqQztBQUNBLEtBQU1NLENBQUFBLE1BQU0sMEJBQUcsS0FBTVQsQ0FBQUEsRUFBRSxDQUFDVSxRQUFILENBQVlSLEdBQUcsQ0FBQ1MsSUFBaEIsQ0FBVCxDQUFaLENBQ0E7QUFIaUMsd0JBSWpDUixHQUFHLENBQUNTLE1BQUosQ0FBVyxHQUFYLEVBQWdCUixJQUFoQixDQUFxQkssTUFBckIsRUFDSCxDQUxELEVBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx3QkFDQVgsTUFBTSxDQUFDZSxHQUFQLENBQVcsTUFBWCxDQUFtQixNQUFPWCxHQUFQLENBQVlDLEdBQVosR0FBb0IseUJBQ25DLEtBQU1NLENBQUFBLE1BQU0sMEJBQUcsS0FBTVQsQ0FBQUEsRUFBRSxDQUFDYyxXQUFILENBQWVaLEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxFQUExQixDQUE4QkwsR0FBRyxDQUFDUyxJQUFsQyxDQUFULENBQVosQ0FEbUMseUJBRW5DUixHQUFHLENBQUNDLElBQUosQ0FBU0ssTUFBVCxFQUNILENBSEQsRUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx5QkFDQVgsTUFBTSxDQUFDaUIsTUFBUCxDQUFjLE1BQWQsQ0FBc0IsTUFBT2IsR0FBUCxDQUFZQyxHQUFaLEdBQW9CLHlCQUN0QyxLQUFNTSxDQUFBQSxNQUFNLDJCQUFHLEtBQU1ULENBQUFBLEVBQUUsQ0FBQ2dCLFdBQUgsQ0FBZWQsR0FBRyxDQUFDSSxNQUFKLENBQVdDLEVBQTFCLENBQVQsQ0FBWixDQURzQyx5QkFFdENKLEdBQUcsQ0FBQ0MsSUFBSixDQUFTSyxNQUFULEVBQ0gsQ0FIRCxFLHlCQUtBUSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJwQixNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcmV0dXJucyBkYXRhIGZvciAnL2FwaS9ldmVudCcgcm91dGVzXG4gKi9cbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuY29uc3QgZGIgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy9kYXRhYmFzZS5zZXJ2aWNlJyk7XG5cbi8qKlxuICogR0VUIC9hcGkvZXZlbnQvOmlkXG4gKiBSZXR1cm5zIHRoZSBldmVudCByZWZlcmVuY2VkIGJ5IHRoZSB2YWx1ZSBzdWJzdGl0dXRlZCBmb3IgOmlkXG4gKiBGb3IgZXhhbXBsZTogL2V2ZW50cy9ldmVudC8xIHJldHVybnMgdGhlIGV2ZW50IHdpdGggdGhlIGlkIG9mIDFcbiAqL1xucm91dGVyLmdldCgnLzppZCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHJlcy5qc29uKGF3YWl0IGRiLmdldEV2ZW50QnlJZChyZXEucGFyYW1zLmlkKSk7XG59KTtcblxuLyoqXG4gKiBQT1NUIC9hcGkvZXZlbnRcbiAqIENyZWF0ZXMgYSBuZXcgZXZlbnQgZnJvbSB0aGUgZGF0YSBpbiB0aGUgcmVxdWVzdCBib2R5IChyZXEuYm9keSlcbiAqIFJldHVybnMgdGhlIGxpc3Qgb2YgYWxsIGV2ZW50cyBpbmNsdWRpbmcgdGhlIG5ldyBldmVudFxuICovXG5yb3V0ZXIucG9zdCgnLycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIC8vIGFkZCB0byB0aGUgZGF0YWJhc2VcbiAgICBjb25zdCBldmVudHMgPSBhd2FpdCBkYi5hZGRFdmVudChyZXEuYm9keSk7XG4gICAgLy8gcmV0dXJuIGFsbCBldmVudHNcbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbihldmVudHMpO1xufSk7XG5cbi8qKlxuICogUFVUIC9hcGkvZXZlbnQvOmlkXG4gKiBVcGRhdGVzIHRoZSBldmVudCByZWZlcmVuY2VkIGJ5IHRoZSB2YWx1ZSBzdWJzdGl0dXRlZCBmb3IgOmlkXG4gKiBGb3IgZXhhbXBsZTogL2V2ZW50cy9ldmVudC8xIHdpbGwgdXBkYXRlIHRoZSBldmVudCB3aXRoIHRoZSBpZCA9IDFcbiAqIHVzaW5nIHRoZSB2YWx1ZXMgaW4gdGhlIHJlcXVlc3QgYm9keSAocmVxLmJvZHkpXG4gKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGFsbCBldmVudHMgaW5jbHVkaW5nIHRoZSB1cGRhdGVkIGV2ZW50XG4gKi9cbnJvdXRlci5wdXQoJy86aWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSBhd2FpdCBkYi51cGRhdGVFdmVudChyZXEucGFyYW1zLmlkLCByZXEuYm9keSk7XG4gICAgcmVzLmpzb24oZXZlbnRzKTtcbn0pO1xuXG4vKipcbiAqIERFTEVURSAvYXBpL2V2ZW50LzppZFxuICogRGVsZXRlcyB0aGUgZXZlbnQgcmVmZXJlbmNlZCBieSB0aGUgdmFsdWUgc3Vic3RpdHV0ZWQgZm9yIDppZFxuICogRm9yIGV4YW1wbGU6IC9ldmVudHMvZXZlbnQvMSB3aWxsIGRlbGV0ZSB0aGUgZXZlbnQgd2l0aCB0aGUgaWQgPSAxXG4gKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGFsbCBldmVudHMgZXhjbHVkaW5nIHRoZSBkZWxldGVkIGV2ZW50XG4gKi9cbnJvdXRlci5kZWxldGUoJy86aWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSBhd2FpdCBkYi5kZWxldGVFdmVudChyZXEucGFyYW1zLmlkKTtcbiAgICByZXMuanNvbihldmVudHMpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm91dGVyO1xuIl19